// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var app, isDeveloper;

  isDeveloper = true;

  app = angular.module("myApp", ["ionic", "myApp.filters", "myApp.services", "myApp.controllers", "myApp.directives", "ngRoute", "LocalStorageModule"]);

  app.config([
    "$routeProvider", function($routeProvider) {
      $routeProvider.when("/", {
        templateUrl: "index.html",
        controller: "IndexController",
        access: {
          isFree: true
        }
      });
      $routeProvider.when("/sign_in", {
        templateUrl: "partials/sign_in.html",
        controller: "SignInController"
      }, {
        isFree: true
      });
      $routeProvider.when("/sign_up", {
        templateUrl: "partials/sign_up.html",
        controller: "SignUpController"
      }, {
        isFree: true
      });
      $routeProvider.when("/form/:_id", {
        templateUrl: "partials/form.html",
        controller: "FormController"
      }, {
        isFree: isDeveloper
      });
      $routeProvider.when("/all_forms", {
        templateUrl: "partials/allForms.html",
        controller: "FormDisplayController"
      }, {
        isFree: isDeveloper
      });
      $routeProvider.when("/mydata", {
        templateUrl: "partials/mydata.html",
        controller: "MyDataController"
      }, {
        isFree: isDeveloper
      });
      $routeProvider.when("/logout", {
        templateUrl: "partials/sign_in.html",
        controller: "LogoutController"
      }, {
        isFree: true
      });
      return $routeProvider.otherwise({
        redirectTo: "/sign_in"
      });
    }
  ]);

  app.run([
    "$rootScope", "$location", "User", "fieldsService", "formsService", "localStorageService", function($rootScope, $location, User, fieldsService, formsService, localStorageService) {
      var _this = this;
      $rootScope.updateUser = function(email, secret, successUpdate) {
        var data, success;
        $rootScope.updateStatus = "start";
        data = {
          email: email,
          secret: secret
        };
        success = function(data, status, headers, config) {
          var successForms;
          $rootScope.updateStatus = "Users";
          if (data.result != null) {
            console.log("user");
            console.log(User);
            console.log("data");
            console.log(data.result);
            User.data = data.result;
            User.data['secret'] = secret;
            User.authenticated = true;
            successForms = function(data, status, headers, config) {
              var form, formData, successFields, _i, _len, _ref;
              $rootScope.updateStatus = "Forms";
              if (data.result != null) {
                console.log("success here!kjhx;");
                console.log(data.result);
                formsService.orderedData = data.result;
                formData = {};
                _ref = data.result;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  form = _ref[_i];
                  formData[form._id] = form;
                }
                formsService.data = formData;
                successFields = function(data, status, headers, config) {
                  var field, fieldData, _j, _len1, _ref1;
                  $rootScope.updateStatus = "Fields";
                  if (data.result != null) {
                    console.log(data.result);
                    fieldData = {};
                    _ref1 = data.result;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                      field = _ref1[_j];
                      fieldData[field._id] = field;
                    }
                    fieldsService.data = fieldData;
                    return successUpdate();
                  }
                };
                return make_request("/fields", "GET", null, successFields);
              }
            };
            return make_request("/forms", "GET", null, successForms);
          } else {
            raise_error_message("Incorrect email & password combination");
            localStorageService.clearAll();
            User.authenticated = false;
            $$rootScope.updateStatus = "error";
            return $rootScope.stopLoad();
          }
        };
        return make_request("/auth/users", "POST", data, success);
      };
      return $rootScope.$watch(function() {
        return $location.path();
      }, function(next, prev) {
        if (!User.authenticated && $location.path().search("sign") === -1) {
          console.log($location.path());
          console.log("sending to sign in");
          return $location.path("/sign_in");
        }
      });
    }
  ]);

}).call(this);
