// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var app, isDeveloper;

  isDeveloper = true;

  app = angular.module("myApp", ["ionic", "myApp.filters", "myApp.services", "myApp.controllers", "myApp.directives", "ngRoute", "LocalStorageModule"]);

  app.config([
    "$routeProvider", function($routeProvider) {
      $routeProvider.when("/sign_in", {
        templateUrl: "partials/sign_in.html",
        controller: "SignInController"
      }, {
        isFree: true
      });
      $routeProvider.when("/sign_up", {
        templateUrl: "partials/sign_up.html",
        controller: "SignUpController"
      }, {
        isFree: true
      });
      $routeProvider.when("/form/:_id", {
        templateUrl: "partials/form.html",
        controller: "FormController"
      }, {
        isFree: isDeveloper
      });
      $routeProvider.when("/all_forms", {
        templateUrl: "partials/allForms.html",
        controller: "FormDisplayController"
      }, {
        isFree: isDeveloper
      });
      $routeProvider.when("/mydata", {
        templateUrl: "partials/mydata.html",
        controller: "MyDataController"
      }, {
        isFree: isDeveloper
      });
      $routeProvider.when("/logout", {
        templateUrl: "partials/sign_in.html",
        controller: "LogoutController"
      }, {
        isFree: true
      });
      return $routeProvider.otherwise({
        redirectTo: "/sign_in"
      });
    }
  ]);

  app.run([
    "$rootScope", "$location", "User", "fieldsService", "formsService", "localStorageService", "$route", function($rootScope, $location, User, fieldsService, formsService, localStorageService, $route) {
      var _this = this;
      $rootScope.updateUser = function(userEmail, userSecret, userSuccessUpdate) {
        var data, email, secret, success, successFields, successForms, successUpdate;
        successUpdate = function() {
          if (userSuccessUpdate != null) {
            userSuccessUpdate();
          }
          $rootScope.stopLoad();
          $rootScope.$apply();
          $route.reload();
          return console.log("Done update");
        };
        $rootScope.successCount = 0;
        console.log("LOCAL");
        data = {
          email: localStorageService.get('email'),
          secret: localStorageService.get('secret')
        };
        console.log(data);
        if ((userEmail != null) && (userSecret != null)) {
          $rootScope.updateStatus = "start";
          data = {
            email: userEmail,
            secret: userSecret
          };
        }
        console.log(data);
        email = data['email'];
        secret = data['secret'];
        success = function(data, status, headers, config) {
          $rootScope.updateStatus = "Users";
          if (data.result != null) {
            console.log("user");
            console.log(User);
            console.log("data")(console.log(data.result));
            User.data = data.result;
            User.data['secret'] = secret;
            User.authenticated = true;
            console.log("user");
            console.log(User);
            $rootScope.successCount += 1;
            return $rootScope.doneDownloading();
          } else {
            raise_error_message("Incorrect email & password combination");
            localStorageService.clearAll();
            User.authenticated = false;
            console.log("sending to sign in");
            $location.path("/sign_in");
            $rootScope.updateStatus = "error";
            return $rootScope.stopLoad();
          }
        };
        successForms = function(data, status, headers, config) {
          var form, formData, _i, _len, _ref;
          $rootScope.updateStatus = "Forms";
          if (data.result != null) {
            console.log("success here!kjhx;");
            console.log(data.result);
            formsService.orderedData = data.result;
            formData = {};
            _ref = data.result;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              form = _ref[_i];
              formData[form._id] = form;
            }
            formsService.data = formData;
            $rootScope.successCount += 1;
            return $rootScope.doneDownloading();
          }
        };
        successFields = function(data, status, headers, config) {
          var field, fieldData, _i, _len, _ref;
          $rootScope.updateStatus = "Fields";
          if (data.result != null) {
            console.log(data.result);
            fieldData = {};
            _ref = data.result;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              field = _ref[_i];
              fieldData[field._id] = field;
            }
            fieldsService.data = fieldData;
            $rootScope.successCount += 1;
            return $rootScope.doneDownloading();
          }
        };
        $rootScope.doneDownloading = function() {
          if ($rootScope.successCount === 3) {
            localStorageService.add('email', User.data.profile.email);
            localStorageService.add('secret', User.data.secret);
            successUpdate();
            return $rootScope.successCount = 0;
          }
        };
        make_request("/fields", "GET", null, successFields);
        make_request("/forms", "GET", null, successForms);
        return make_request("/auth/users", "POST", data, success);
      };
      return $rootScope.$watch(function() {
        return $location.path();
      }, function(next, prev) {
        if (!User.authenticated && $location.path().search("sign") === -1) {
          $rootScope.updateUser();
          return console.log($location.path());
        }
      });
    }
  ]);

}).call(this);
